{"version":3,"sources":["../../../src/state-machines/data-layer/index.ts"],"names":["dataLayerStates","initial","states","customizingSchema","invoke","src","id","onDone","target","sourcingNodes","actions","buildingSchema","creatingPages","cond","context","firstRun","creatingPagesStatefully","done","type","data","gatsbyNodeGraphQLFunction","graphqlRunner","pagesToBuild","pagesToDelete","dataLayerMachine","dataLayerActions","services","dataLayerServices"],"mappings":";;;;;AAAA;;AACA;;AAEA;;AAUA,MAAMA,eAA2D,GAAG;AAClEC,EAAAA,OAAO,EAAG,mBADwD;AAElEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,iBADA;AAENC,QAAAA,EAAE,EAAG,oBAFC;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADS,KADb;AAUNC,IAAAA,aAAa,EAAE;AACbL,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,aADA;AAENC,QAAAA,EAAE,EAAG,gBAFC;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG,gBADH;AAENE,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADK,KAVT;AAoBNC,IAAAA,cAAc,EAAE;AACdP,MAAAA,MAAM,EAAE;AACNE,QAAAA,EAAE,EAAG,iBADC;AAEND,QAAAA,GAAG,EAAG,aAFA;AAGNE,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG,eADH;AAENE,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADM,KApBV;AA8BNE,IAAAA,aAAa,EAAE;AACbR,MAAAA,MAAM,EAAE;AACNE,QAAAA,EAAE,EAAG,gBADC;AAEND,QAAAA,GAAG,EAAG,aAFA;AAGNE,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,MAAM,EAAG,yBADX;AAEEE,UAAAA,OAAO,EAAG,oBAFZ;AAGEG,UAAAA,IAAI,EAAGC,OAAD,IAAsB,CAAC,CAACA,OAAO,CAACC;AAHxC,SADM,EAMN;AACEP,UAAAA,MAAM,EAAG,MADX;AAEEE,UAAAA,OAAO,EAAG;AAFZ,SANM;AAHF;AADK,KA9BT;AA+CNM,IAAAA,uBAAuB,EAAE;AACvBZ,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,uBADA;AAENC,QAAAA,EAAE,EAAG,2BAFC;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADe,KA/CnB;AAwDNS,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAG,OADH;AAEJC,MAAAA,IAAI,EAAE,CAAC;AACLC,QAAAA,yBADK;AAELC,QAAAA,aAFK;AAGLC,QAAAA,YAHK;AAILC,QAAAA;AAJK,OAAD,KAKiB;AACrB,eAAO;AACLH,UAAAA,yBADK;AAELC,UAAAA,aAFK;AAGLC,UAAAA,YAHK;AAILC,UAAAA;AAJK,SAAP;AAMD;AAdG;AAxDA;AAF0D,CAApE;AA6EO,MAAMC,gBAAgB,GAAG,qBAAQxB,eAAR,EAAyB;AACvDU,EAAAA,OAAO,EAAEe,yBAD8C;AAEvDC,EAAAA,QAAQ,EAAEC;AAF6C,CAAzB,CAAzB","sourcesContent":["import { MachineConfig, Machine } from \"xstate\"\nimport { dataLayerActions } from \"./actions\"\nimport { IDataLayerContext } from \"./types\"\nimport { dataLayerServices } from \"./services\"\n\nexport type DataLayerResult = Pick<\n  IDataLayerContext,\n  | \"gatsbyNodeGraphQLFunction\"\n  | \"graphqlRunner\"\n  | \"pagesToBuild\"\n  | \"pagesToDelete\"\n>\n\nconst dataLayerStates: MachineConfig<IDataLayerContext, any, any> = {\n  initial: `customizingSchema`,\n  states: {\n    customizingSchema: {\n      invoke: {\n        src: `customizeSchema`,\n        id: `customizing-schema`,\n        onDone: {\n          target: `sourcingNodes`,\n        },\n      },\n    },\n    sourcingNodes: {\n      invoke: {\n        src: `sourceNodes`,\n        id: `sourcing-nodes`,\n        onDone: {\n          target: `buildingSchema`,\n          actions: `assignChangedPages`,\n        },\n      },\n    },\n    buildingSchema: {\n      invoke: {\n        id: `building-schema`,\n        src: `buildSchema`,\n        onDone: {\n          target: `creatingPages`,\n          actions: `assignGatsbyNodeGraphQL`,\n        },\n      },\n    },\n    creatingPages: {\n      invoke: {\n        id: `creating-pages`,\n        src: `createPages`,\n        onDone: [\n          {\n            target: `creatingPagesStatefully`,\n            actions: `assignChangedPages`,\n            cond: (context): boolean => !!context.firstRun,\n          },\n          {\n            target: `done`,\n            actions: `assignChangedPages`,\n          },\n        ],\n      },\n    },\n    creatingPagesStatefully: {\n      invoke: {\n        src: `createPagesStatefully`,\n        id: `creating-pages-statefully`,\n        onDone: {\n          target: `done`,\n        },\n      },\n    },\n    done: {\n      type: `final`,\n      data: ({\n        gatsbyNodeGraphQLFunction,\n        graphqlRunner,\n        pagesToBuild,\n        pagesToDelete,\n      }): DataLayerResult => {\n        return {\n          gatsbyNodeGraphQLFunction,\n          graphqlRunner,\n          pagesToBuild,\n          pagesToDelete,\n        }\n      },\n    },\n  },\n}\n\nexport const dataLayerMachine = Machine(dataLayerStates, {\n  actions: dataLayerActions,\n  services: dataLayerServices,\n})\n"],"file":"index.js"}