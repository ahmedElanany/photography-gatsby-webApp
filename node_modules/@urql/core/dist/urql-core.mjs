function n(a, b) {
  a |= 0;
  for (var c = 0, d = 0 | b.length; c < d; c++) {
    a = (a << 5) + a + b.charCodeAt(c);
  }
  return a;
}

function r(a, b) {
  if ("string" == typeof a) {
    var c = n(5381, a.replace(/[\s,]+/g, " ").trim()) >>> 0;
    a = void 0 !== q[c] ? q[c] : parse(a);
  } else {
    void 0 !== a.__key ? c = a.__key : (c = n(5381, print(a).replace(/[\s,]+/g, " ").trim()) >>> 0, 
    a = void 0 !== q[c] ? q[c] : a);
  }
  q[c] = a;
  a.__key = c;
  return {
    key: b ? n(c, stringifyVariables(b)) >>> 0 : c,
    query: a,
    variables: b || {}
  };
}

function t(a, b) {
  return _extends({}, a, {
    context: _extends({}, a.context, {
      meta: _extends({}, a.context.meta, b)
    })
  });
}

function u(a, b) {
  void 0 === b && (b = []);
  if (Array.isArray(a)) {
    a.forEach((function c(a) {
      u(a, b);
    }));
  } else if ("object" == typeof a && null !== a) {
    for (var d in a) {
      "__typename" === d && "string" == typeof a[d] ? b.push(a[d]) : u(a[d], b);
    }
  }
  return b;
}

function v(a, b, c) {
  return c.indexOf(a) === b;
}

function w(a) {
  return a.kind === Kind.FIELD && "__typename" === a.name.value;
}

function x(a) {
  if (a.selectionSet && !a.selectionSet.selections.some(w)) {
    return _extends({}, a, {
      selectionSet: _extends({}, a.selectionSet, {
        selections: a.selectionSet.selections.concat([ {
          kind: Kind.FIELD,
          name: {
            kind: Kind.NAME,
            value: "__typename"
          }
        } ])
      })
    });
  }
}

function y(a) {
  var b = visit(a, {
    Field: x,
    InlineFragment: x
  });
  b.__key = a.__key;
  return b;
}

function A(a) {
  return a && "object" == typeof a ? Object.keys(a).reduce((function(b, c) {
    var d = a[c];
    "__typename" === c ? Object.defineProperty(b, "__typename", {
      enumerable: !1,
      value: d
    }) : Array.isArray(d) ? b[c] = d.map(A) : b[c] = d && "object" == typeof d && "__typename" in d ? A(d) : d;
    return b;
  }), {}) : a;
}

function B(a) {
  a.toPromise = function() {
    return toPromise(take(1)(a));
  };
  return a;
}

function C() {}

function D(a) {
  return "subscription" !== (a = a.operationName) && "query" !== a;
}

function E(a) {
  return a.path || a.extensions ? {
    message: a.message,
    path: a.path,
    extensions: a.extensions
  } : a.message;
}

function F(a) {
  return "mutation" !== (a = a.operationName) && "query" !== a;
}

function G(a) {
  return _extends({}, a, {
    query: y(a.query)
  });
}

function H(a) {
  return "query" !== a.operationName || "cache-only" !== a.context.requestPolicy;
}

function I(a) {
  return t(a, {
    cacheOutcome: "miss"
  });
}

function J(a) {
  return F(a);
}

function K(a) {
  function b(a) {
    var b = a.context.requestPolicy;
    return "query" === a.operationName && "network-only" !== b && ("cache-only" === b || h.has(a.key));
  }
  function c(a) {
    var c = h.get(a.key);
    "production" !== process.env.NODE_ENV && g(_extends({}, {
      operation: a
    }, c ? {
      type: "cacheHit",
      message: "The result was successfully retried from the cache"
    } : {
      type: "cacheMiss",
      message: "The result could not be retrieved from the cache"
    }));
    c = _extends({}, c, {
      operation: t(a, {
        cacheOutcome: c ? "hit" : "miss"
      })
    });
    "cache-and-network" === a.context.requestPolicy && (c.stale = !0, L(m, a));
    return c;
  }
  function d(a) {
    return !F(a) && b(a);
  }
  function e(a) {
    a.operation && "mutation" === a.operation.operationName ? k(a) : a.operation && "query" === a.operation.operationName && l(a);
  }
  function f(a) {
    return !F(a) && !b(a);
  }
  var k, l, p = a.forward, m = a.client, g = a.dispatchDebug, h = new Map;
  a = Object.create(null);
  k = function M(a, b, c, d) {
    function e(b) {
      if (a.has(b)) {
        var d = a.get(b).operation;
        a.delete(b);
        L(c, d);
      }
    }
    return function(a) {
      function c(a) {
        f.add(a);
      }
      var f = new Set, g = a.operation.context.additionalTypenames;
      g = u(a.data).filter(v).concat(g || []);
      "production" !== process.env.NODE_ENV && d({
        type: "cacheInvalidation",
        message: "The following typenames have been invalidated: " + g,
        operation: a.operation,
        data: {
          typenames: g,
          response: a
        },
        source: "cacheExchange"
      });
      g.forEach((function(a) {
        (a = b[a] || (b[a] = new Set)).forEach(c);
        a.clear();
      }));
      f.forEach(e);
    };
  }(h, a, m, g), l = function N(a, b) {
    return function(c) {
      var d = c.operation, e = c.data, f = d.context.additionalTypenames;
      null != e && (a.set(d.key, {
        operation: d,
        data: e,
        error: c.error
      }), u(c.data).filter(v).concat(f || []).forEach((function(a) {
        (b[a] || (b[a] = new Set)).add(d.key);
      })));
    };
  }(h, a);
  return function(a) {
    var b = share(a);
    a = map(c)(filter(d)(b));
    b = tap(e)(p(filter(H)(map(I)(merge([ map(G)(filter(f)(b)), filter(J)(b) ])))));
    return merge([ a, b ]);
  };
}

function L(a, b) {
  return a.reexecuteOperation(_extends({}, b, {
    context: _extends({}, b.context, {
      requestPolicy: "network-only"
    })
  }));
}

function O(a) {
  return console.log("[Exchange debug]: Completed operation: ", a);
}

function P(a) {
  return console.log("[Exchange debug]: Incoming operation: ", a);
}

function Q(a) {
  function b(a) {
    f.delete(a.operation.key);
  }
  function c(a) {
    var c = a.key, b = a.operationName;
    if ("teardown" === b) {
      return f.delete(c), !0;
    }
    if ("query" !== b && "subscription" !== b) {
      return !0;
    }
    b = f.has(c);
    f.add(c);
    b && "production" !== process.env.NODE_ENV && e({
      type: "dedup",
      message: "An operation has been deduped.",
      operation: a,
      source: "dedupExchange"
    });
    return !b;
  }
  var d = a.forward, e = a.dispatchDebug, f = new Set;
  return function(a) {
    a = filter(c)(a);
    return tap(b)(d(a));
  };
}

function R(a) {
  return "query" === a.operationName || "mutation" === a.operationName;
}

function S(a) {
  return "query" !== a.operationName && "mutation" !== a.operationName;
}

function T(a) {
  var b = a.forward, c = a.dispatchDebug;
  return function(a) {
    var f, d = share(a);
    a = mergeMap((function(a) {
      var b = a.key, g = filter((function(a) {
        return "teardown" === a.operationName && a.key === b;
      }))(d), e = makeFetchBody(a), f = makeFetchURL(a, e), l = makeFetchOptions(a, e);
      "production" !== process.env.NODE_ENV && c({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: a,
        data: {
          url: f,
          fetchOptions: l
        },
        source: "fetchExchange"
      });
      return onPush((function(b) {
        var d = b.data ? void 0 : b.error;
        "production" !== process.env.NODE_ENV && c({
          type: d ? "fetchError" : "fetchSuccess",
          message: "A " + (d ? "failed" : "successful") + " fetch response has been returned.",
          operation: a,
          data: {
            url: f,
            fetchOptions: l,
            value: d || b
          },
          source: "fetchExchange"
        });
      }))(takeUntil(g)(makeFetchSource(a, f, l)));
    }))(filter(R)(d));
    f = b(filter(S)(d));
    return merge([ a, f ]);
  };
}

function U() {
  return !1;
}

function V(a) {
  function b(a) {
    if ("teardown" !== a.operationName && "production" !== process.env.NODE_ENV) {
      var b = 'No exchange has handled operations of type "' + a.operationName + "\". Check whether you've added an exchange responsible for these operations.";
      "production" !== process.env.NODE_ENV && c({
        type: "fallbackCatch",
        message: b,
        operation: a,
        source: "fallbackExchange"
      });
      console.warn(b);
    }
  }
  var c = a.dispatchDebug;
  return function(a) {
    return filter(U)(tap(b)(a));
  };
}

function X(a) {
  return function(b) {
    var c = b.client, d = b.dispatchDebug;
    return a.reduceRight((function(a, b) {
      return b({
        client: c,
        forward: a,
        dispatchDebug: function(a) {
          "production" !== process.env.NODE_ENV && d(_extends({}, {
            timestamp: Date.now(),
            source: b.name
          }, a));
        }
      });
    }), b.forward);
  };
}

function Z(a) {
  var d, e, f, p, m, c = this;
  this.activeOperations = Object.create(null);
  this.queue = [];
  this.createOperationContext = function(a) {
    return _extends({}, {
      url: c.url,
      fetchOptions: c.fetchOptions,
      fetch: c.fetch,
      preferGetMethod: c.preferGetMethod
    }, a, {
      requestPolicy: (a || {}).requestPolicy || c.requestPolicy
    });
  };
  this.createRequestOperation = function(a, b, d) {
    return {
      key: b.key,
      query: b.query,
      variables: b.variables,
      operationName: a,
      context: c.createOperationContext(d)
    };
  };
  this.executeQuery = function(a, b) {
    a = c.createRequestOperation("query", a, b);
    var l = c.executeRequestOperation(a);
    return (a = a.context.pollInterval) ? switchMap((function d() {
      return l;
    }))(merge([ fromValue(0), interval(a) ])) : l;
  };
  this.executeSubscription = function(a, b) {
    a = c.createRequestOperation("subscription", a, b);
    return c.executeRequestOperation(a);
  };
  this.executeMutation = function(a, b) {
    a = c.createRequestOperation("mutation", a, b);
    return c.executeRequestOperation(a);
  };
  if ("production" !== process.env.NODE_ENV && !a.url) {
    throw Error("You are creating an urql-client without a url.");
  }
  d = C;
  if ("production" !== process.env.NODE_ENV) {
    e = (d = makeSubject()).next, f = d.source;
    this.subscribeToDebugTarget = function b(a) {
      return subscribe(a)(f);
    };
    d = e;
  }
  this.url = a.url;
  this.fetchOptions = a.fetchOptions;
  this.fetch = a.fetch;
  this.suspense = !!a.suspense;
  this.requestPolicy = a.requestPolicy || "cache-first";
  this.preferGetMethod = !!a.preferGetMethod;
  this.maskTypename = !!a.maskTypename;
  e = makeSubject();
  p = e.next;
  this.operations$ = e.source;
  m = !1;
  this.dispatchOperation = function(a) {
    m = !0;
    for (a && p(a); a = c.queue.shift(); ) {
      p(a);
    }
    m = !1;
  };
  this.reexecuteOperation = function(a) {
    0 < (c.activeOperations[a.key] || 0) && (c.queue.push(a), m || Promise.resolve().then(c.dispatchOperation));
  };
  a = X(void 0 !== a.exchanges ? a.exchanges : Y);
  this.results$ = share(a({
    client: this,
    dispatchDebug: d,
    forward: V({
      dispatchDebug: d
    })
  })(this.operations$));
  publish(this.results$);
}

function aa(a) {
  a.data = A(a.data);
  return a;
}

function createClient(a) {
  return new Z(a);
}

function debugExchange(a) {
  var d = a.forward;
  return "production" === process.env.NODE_ENV ? function b(a) {
    return d(a);
  } : function c(a) {
    return tap(O)(d(tap(P)(a)));
  };
}

function ssrExchange(a) {
  function b(b) {
    var c = b.client, l = b.forward;
    return function(b) {
      var e = a && "boolean" == typeof a.isClient ? !!a.isClient : !c.suspense, k = share(b);
      b = l(filter(f)(k));
      k = map(p)(filter(m)(k));
      e ? k = tap(d)(k) : b = tap(g)(b);
      return merge([ b, k ]);
    };
  }
  function c(a) {
    return !D(a) && void 0 !== h[a.key];
  }
  function d(a) {
    k.push(a.operation.key);
    1 === k.length && Promise.resolve().then(e);
  }
  function e() {
    for (var a; a = k.shift(); ) {
      delete h[a];
    }
  }
  function f(a) {
    return !c(a);
  }
  function p(a) {
    var b = h[a.key], c = b.error;
    return {
      operation: a,
      data: b.data,
      extensions: void 0,
      error: c ? new CombinedError({
        networkError: c.networkError ? Error(c.networkError) : void 0,
        graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0
      }) : void 0
    };
  }
  function m(a) {
    return c(a);
  }
  function g(a) {
    var c, b = a.operation;
    if (!D(b)) {
      c = a.error;
      a = {
        data: a.data,
        error: void 0
      };
      c && (a.error = {
        graphQLErrors: c.graphQLErrors.map(E),
        networkError: c.networkError ? "" + c.networkError : void 0
      });
      h[b.key] = a;
    }
  }
  var h = {}, k = [];
  b.restoreData = function(a) {
    return _extends(h, a);
  };
  b.extractData = function() {
    return _extends({}, h);
  };
  a && a.initialState && b.restoreData(a.initialState);
  return b;
}

function subscriptionExchange(a) {
  function b(a) {
    return "subscription" === (a = a.operationName) || !!d && ("query" === a || "mutation" === a);
  }
  var c = a.forwardSubscription, d = a.enableAllOperations;
  return function(a) {
    function d(a) {
      var b = c({
        key: a.key.toString(36),
        query: print(a.query),
        variables: a.variables,
        context: _extends({}, a.context)
      });
      return make((function(c) {
        function d(b) {
          return k(makeResult(a, b));
        }
        function e(b) {
          return k(makeErrorResult(a, b));
        }
        function f() {
          g || (g = !0, "subscription" === a.operationName && m.reexecuteOperation(_extends({}, a, {
            operationName: "teardown"
          })), h());
        }
        var l, k = c.next, h = c.complete, g = !1;
        Promise.resolve().then((function() {
          g || (l = b.subscribe({
            next: d,
            error: e,
            complete: f
          }));
        }));
        return function() {
          g = !0;
          l && l.unsubscribe();
        };
      }));
    }
    function e(a) {
      return !h(a);
    }
    var m = a.client, g = a.forward, h = b;
    return function(a) {
      var c, b = share(a);
      a = mergeMap((function(a) {
        var c = a.key, e = filter((function(a) {
          return "teardown" === a.operationName && a.key === c;
        }))(b);
        return takeUntil(e)(d(a));
      }))(filter(h)(b));
      c = g(filter(e)(b));
      return merge([ a, c ]);
    };
  };
}

var q, W, Y;

import { visit } from "graphql/language/visitor";

import { Kind } from "graphql/language/kinds";

import { print } from "graphql/language/printer";

import { parse } from "graphql/language/parser";

import { share, onPush, takeWhile, toPromise, take, filter, map, tap, merge, mergeMap, takeUntil, make, switchMap, fromValue, interval, makeSubject, publish, onStart, onEnd, subscribe } from "wonka";

import { s as stringifyVariables, _ as _extends, C as CombinedError, m as makeResult, a as makeErrorResult, b as makeFetchBody, c as makeFetchURL, d as makeFetchOptions, e as makeFetchSource } from "./9ab84a44.mjs";

export { C as CombinedError, a as makeErrorResult, m as makeResult, s as stringifyVariables } from "./9ab84a44.mjs";

q = Object.create(null);

W = V({
  dispatchDebug: C
});

Y = [ Q, K, T ];

Z.prototype.onOperationStart = function(a) {
  var b = a.key;
  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;
  this.dispatchOperation(a);
};

Z.prototype.onOperationEnd = function(a) {
  var b = a.key, c = this.activeOperations[b] || 0;
  0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1) && this.dispatchOperation(_extends({}, a, {
    operationName: "teardown"
  }));
};

Z.prototype.executeRequestOperation = function(a) {
  var p, c = this, d = a.key, e = a.operationName, f = filter((function(a) {
    return a.operation.key === d;
  }))(this.results$);
  this.maskTypename && (f = map(aa)(f));
  if ("mutation" === e) {
    return take(1)(onStart((function b() {
      return c.dispatchOperation(a);
    }))(f));
  }
  p = filter((function(a) {
    return "teardown" === a.operationName && a.key === d;
  }))(this.operations$);
  f = onEnd((function() {
    c.onOperationEnd(a);
  }))(onStart((function() {
    c.onOperationStart(a);
  }))(takeUntil(p)(f)));
  return !1 !== a.context.suspense && this.suspense && "query" === e ? function z(a) {
    return function(b) {
      var c = share(a), d = !1, e = !1;
      onPush((function() {
        return d = !0;
      }))(takeWhile((function() {
        return !e;
      }))(c))(b);
      if (!d) {
        throw e = !0, b(0), toPromise(take(1)(c));
      }
    };
  }(f) : f;
};

Z.prototype.query = function(a, b, c) {
  c && "boolean" == typeof c.suspense || (c = _extends({}, c, {
    suspense: !1
  }));
  return B(this.executeQuery(r(a, b), c));
};

Z.prototype.readQuery = function(a, b, c) {
  var d = null;
  subscribe((function(a) {
    d = a;
  }))(this.executeQuery(r(a, b), c)).unsubscribe();
  return d;
};

Z.prototype.subscription = function(a, b, c) {
  return this.executeSubscription(r(a, b), c);
};

Z.prototype.mutation = function(a, b, c) {
  return B(this.executeMutation(r(a, b), c));
};

export { Z as Client, K as cacheExchange, X as composeExchanges, createClient, r as createRequest, debugExchange, Q as dedupExchange, Y as defaultExchanges, W as fallbackExchangeIO, T as fetchExchange, y as formatDocument, A as maskTypename, ssrExchange, subscriptionExchange };
//# sourceMappingURL=urql-core.mjs.map
